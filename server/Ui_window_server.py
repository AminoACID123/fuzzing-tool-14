# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\Project_VSCode\python\fuzzProject\server\window_server.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets

import sys
import os
import traceback
import re

import Ui_dialog_execServer as execServerDialogPY
import Ui_dialog_selectTarget as targetDialogPY
import Ui_dialog_selectStruct as selectStructDialogPY
import Ui_dialog_output as outputDialogPY
import staticAnalysis as sa
import instrument as instr
import callgraph as cg


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(788, 853)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(300, 30, 161, 16))
        self.title.setObjectName("title")
        self.fileSelectGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.fileSelectGroupBox.setGeometry(QtCore.QRect(70, 50, 651, 201))
        self.fileSelectGroupBox.setObjectName("fileSelectGroupBox")
        self.chooseCBtn = QtWidgets.QPushButton(self.fileSelectGroupBox)
        self.chooseCBtn.setGeometry(QtCore.QRect(510, 70, 131, 28))
        self.chooseCBtn.setObjectName("chooseCBtn")
        self.CFileLoc = QtWidgets.QTextBrowser(self.fileSelectGroupBox)
        self.CFileLoc.setGeometry(QtCore.QRect(10, 20, 631, 41))
        self.CFileLoc.setObjectName("CFileLoc")
        self.HFileLoc = QtWidgets.QTextBrowser(self.fileSelectGroupBox)
        self.HFileLoc.setGeometry(QtCore.QRect(10, 110, 631, 41))
        self.HFileLoc.setObjectName("HFileLoc")
        self.chooseHBtn = QtWidgets.QPushButton(self.fileSelectGroupBox)
        self.chooseHBtn.setGeometry(QtCore.QRect(510, 160, 131, 28))
        self.chooseHBtn.setObjectName("chooseHBtn")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(400, 260, 321, 171))
        self.tabWidget.setStyleSheet("background-color:rgb(235, 235, 235)")
        self.tabWidget.setObjectName("tabWidget")
        self.codeStructTab = QtWidgets.QWidget()
        self.codeStructTab.setObjectName("codeStructTab")
        self.SAByCppcheckBtn = QtWidgets.QPushButton(self.codeStructTab)
        self.SAByCppcheckBtn.setGeometry(QtCore.QRect(210, 15, 93, 31))
        self.SAByCppcheckBtn.setObjectName("SAByCppcheckBtn")
        self.SAByManBtn = QtWidgets.QPushButton(self.codeStructTab)
        self.SAByManBtn.setGeometry(QtCore.QRect(210, 60, 93, 31))
        self.SAByManBtn.setObjectName("SAByManBtn")
        self.targetSetInfo = QtWidgets.QTextBrowser(self.codeStructTab)
        self.targetSetInfo.setGeometry(QtCore.QRect(10, 12, 191, 121))
        self.targetSetInfo.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.targetSetInfo.setObjectName("targetSetInfo")
        self.SAResultGenBtn = QtWidgets.QPushButton(self.codeStructTab)
        self.SAResultGenBtn.setGeometry(QtCore.QRect(210, 105, 93, 31))
        self.SAResultGenBtn.setObjectName("SAResultGenBtn")
        self.tabWidget.addTab(self.codeStructTab, "")
        self.selectInstrVarGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.selectInstrVarGroupBox.setGeometry(QtCore.QRect(70, 270, 291, 61))
        self.selectInstrVarGroupBox.setObjectName("selectInstrVarGroupBox")
        self.selectInstrVarBtn = QtWidgets.QPushButton(self.selectInstrVarGroupBox)
        self.selectInstrVarBtn.setGeometry(QtCore.QRect(80, 20, 141, 28))
        self.selectInstrVarBtn.setObjectName("selectInstrVarBtn")
        self.startServerBtn = QtWidgets.QPushButton(self.centralwidget)
        self.startServerBtn.setGeometry(QtCore.QRect(70, 740, 651, 71))
        self.startServerBtn.setObjectName("startServerBtn")
        self.callGraphGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.callGraphGroupBox.setGeometry(QtCore.QRect(400, 460, 321, 80))
        self.callGraphGroupBox.setObjectName("callGraphGroupBox")
        self.genCallGraphBtn = QtWidgets.QPushButton(self.callGraphGroupBox)
        self.genCallGraphBtn.setGeometry(QtCore.QRect(90, 30, 151, 28))
        self.genCallGraphBtn.setObjectName("genCallGraphBtn")
        self.instrCodePreviewGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.instrCodePreviewGroupBox.setGeometry(QtCore.QRect(400, 570, 321, 161))
        self.instrCodePreviewGroupBox.setObjectName("instrCodePreviewGroupBox")
        self.instrumentCodeLabel = QtWidgets.QLabel(self.instrCodePreviewGroupBox)
        self.instrumentCodeLabel.setGeometry(QtCore.QRect(10, 30, 301, 31))
        self.instrumentCodeLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.instrumentCodeLabel.setTextFormat(QtCore.Qt.AutoText)
        self.instrumentCodeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.instrumentCodeLabel.setWordWrap(False)
        self.instrumentCodeLabel.setIndent(-1)
        self.instrumentCodeLabel.setObjectName("instrumentCodeLabel")
        self.instrVarTypeLabelTip = QtWidgets.QLabel(self.instrCodePreviewGroupBox)
        self.instrVarTypeLabelTip.setGeometry(QtCore.QRect(40, 60, 101, 20))
        self.instrVarTypeLabelTip.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.instrVarTypeLabelTip.setTextFormat(QtCore.Qt.AutoText)
        self.instrVarTypeLabelTip.setAlignment(QtCore.Qt.AlignCenter)
        self.instrVarTypeLabelTip.setWordWrap(False)
        self.instrVarTypeLabelTip.setIndent(-1)
        self.instrVarTypeLabelTip.setObjectName("instrVarTypeLabelTip")
        self.instrVarTypeLabel = QtWidgets.QLabel(self.instrCodePreviewGroupBox)
        self.instrVarTypeLabel.setGeometry(QtCore.QRect(10, 80, 301, 21))
        self.instrVarTypeLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.instrVarTypeLabel.setTextFormat(QtCore.Qt.AutoText)
        self.instrVarTypeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.instrVarTypeLabel.setWordWrap(False)
        self.instrVarTypeLabel.setIndent(-1)
        self.instrVarTypeLabel.setObjectName("instrVarTypeLabel")
        self.assignCodePreviewTipLabel = QtWidgets.QLabel(self.instrCodePreviewGroupBox)
        self.assignCodePreviewTipLabel.setGeometry(QtCore.QRect(40, 100, 101, 20))
        self.assignCodePreviewTipLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.assignCodePreviewTipLabel.setTextFormat(QtCore.Qt.AutoText)
        self.assignCodePreviewTipLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.assignCodePreviewTipLabel.setWordWrap(False)
        self.assignCodePreviewTipLabel.setIndent(-1)
        self.assignCodePreviewTipLabel.setObjectName("assignCodePreviewTipLabel")
        self.assignCodePreviewLabel = QtWidgets.QLabel(self.instrCodePreviewGroupBox)
        self.assignCodePreviewLabel.setGeometry(QtCore.QRect(10, 120, 301, 21))
        self.assignCodePreviewLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.assignCodePreviewLabel.setTextFormat(QtCore.Qt.AutoText)
        self.assignCodePreviewLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.assignCodePreviewLabel.setWordWrap(False)
        self.assignCodePreviewLabel.setIndent(-1)
        self.assignCodePreviewLabel.setObjectName("assignCodePreviewLabel")
        self.instrTabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.instrTabWidget.setGeometry(QtCore.QRect(70, 400, 291, 331))
        self.instrTabWidget.setStyleSheet("background-color:rgb(235, 235, 235)")
        self.instrTabWidget.setObjectName("instrTabWidget")
        self.method1Tab = QtWidgets.QWidget()
        self.method1Tab.setObjectName("method1Tab")
        self.pointerStyleRadioBtn = QtWidgets.QRadioButton(self.method1Tab)
        self.pointerStyleRadioBtn.setGeometry(QtCore.QRect(210, 120, 61, 19))
        self.pointerStyleRadioBtn.setChecked(True)
        self.pointerStyleRadioBtn.setObjectName("pointerStyleRadioBtn")
        self.structParameterName = QtWidgets.QLineEdit(self.method1Tab)
        self.structParameterName.setGeometry(QtCore.QRect(10, 130, 181, 31))
        self.structParameterName.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.structParameterName.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.structParameterName.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.structParameterName.setCursorPosition(10)
        self.structParameterName.setAlignment(QtCore.Qt.AlignCenter)
        self.structParameterName.setObjectName("structParameterName")
        self.pointStyleRadioBtn = QtWidgets.QRadioButton(self.method1Tab)
        self.pointStyleRadioBtn.setGeometry(QtCore.QRect(210, 150, 61, 19))
        self.pointStyleRadioBtn.setChecked(False)
        self.pointStyleRadioBtn.setObjectName("pointStyleRadioBtn")
        self.method1TipLabel = QtWidgets.QLabel(self.method1Tab)
        self.method1TipLabel.setGeometry(QtCore.QRect(10, 40, 261, 61))
        self.method1TipLabel.setObjectName("method1TipLabel")
        self.instrumentMethod1Btn = QtWidgets.QPushButton(self.method1Tab)
        self.instrumentMethod1Btn.setGeometry(QtCore.QRect(10, 210, 121, 28))
        self.instrumentMethod1Btn.setObjectName("instrumentMethod1Btn")
        self.compileMethod1Btn = QtWidgets.QPushButton(self.method1Tab)
        self.compileMethod1Btn.setGeometry(QtCore.QRect(150, 210, 121, 28))
        self.compileMethod1Btn.setObjectName("compileMethod1Btn")
        self.instrTabWidget.addTab(self.method1Tab, "")
        self.method2Tab = QtWidgets.QWidget()
        self.method2Tab.setObjectName("method2Tab")
        self.manualInputInstrCodeLineEdit = QtWidgets.QLineEdit(self.method2Tab)
        self.manualInputInstrCodeLineEdit.setGeometry(QtCore.QRect(17, 148, 251, 31))
        self.manualInputInstrCodeLineEdit.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.manualInputInstrCodeLineEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.manualInputInstrCodeLineEdit.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.manualInputInstrCodeLineEdit.setCursorPosition(15)
        self.manualInputInstrCodeLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.manualInputInstrCodeLineEdit.setObjectName("manualInputInstrCodeLineEdit")
        self.method2TipLabel = QtWidgets.QLabel(self.method2Tab)
        self.method2TipLabel.setGeometry(QtCore.QRect(10, 48, 251, 51))
        self.method2TipLabel.setObjectName("method2TipLabel")
        self.instrVarTypeComboBox = QtWidgets.QComboBox(self.method2Tab)
        self.instrVarTypeComboBox.setGeometry(QtCore.QRect(17, 108, 251, 31))
        self.instrVarTypeComboBox.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.instrVarTypeComboBox.setObjectName("instrVarTypeComboBox")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrVarTypeComboBox.addItem("")
        self.instrumentMethod2Btn = QtWidgets.QPushButton(self.method2Tab)
        self.instrumentMethod2Btn.setGeometry(QtCore.QRect(10, 210, 121, 28))
        self.instrumentMethod2Btn.setObjectName("instrumentMethod2Btn")
        self.compileMethod2Btn = QtWidgets.QPushButton(self.method2Tab)
        self.compileMethod2Btn.setGeometry(QtCore.QRect(150, 210, 121, 28))
        self.compileMethod2Btn.setObjectName("compileMethod2Btn")
        self.instrTabWidget.addTab(self.method2Tab, "")
        self.method3Tab = QtWidgets.QWidget()
        self.method3Tab.setObjectName("method3Tab")
        self.method3TipLabel = QtWidgets.QLabel(self.method3Tab)
        self.method3TipLabel.setGeometry(QtCore.QRect(10, 10, 251, 51))
        self.method3TipLabel.setObjectName("method3TipLabel")
        self.sendBackCodeFileComboBox = QtWidgets.QComboBox(self.method3Tab)
        self.sendBackCodeFileComboBox.setGeometry(QtCore.QRect(100, 150, 171, 31))
        self.sendBackCodeFileComboBox.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.sendBackCodeFileComboBox.setObjectName("sendBackCodeFileComboBox")
        self.sendBackCodeLocLineEdit = QtWidgets.QLineEdit(self.method3Tab)
        self.sendBackCodeLocLineEdit.setGeometry(QtCore.QRect(100, 190, 171, 31))
        self.sendBackCodeLocLineEdit.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.sendBackCodeLocLineEdit.setObjectName("sendBackCodeLocLineEdit")
        self.sendBackCodeFileTipLabel = QtWidgets.QLabel(self.method3Tab)
        self.sendBackCodeFileTipLabel.setGeometry(QtCore.QRect(10, 148, 81, 31))
        self.sendBackCodeFileTipLabel.setObjectName("sendBackCodeFileTipLabel")
        self.sendBackCodeLocTipLabel = QtWidgets.QLabel(self.method3Tab)
        self.sendBackCodeLocTipLabel.setGeometry(QtCore.QRect(10, 190, 81, 31))
        self.sendBackCodeLocTipLabel.setObjectName("sendBackCodeLocTipLabel")
        self.instrumentMethod3Btn = QtWidgets.QPushButton(self.method3Tab)
        self.instrumentMethod3Btn.setGeometry(QtCore.QRect(10, 270, 121, 28))
        self.instrumentMethod3Btn.setObjectName("instrumentMethod3Btn")
        self.compileMethod3Btn = QtWidgets.QPushButton(self.method3Tab)
        self.compileMethod3Btn.setGeometry(QtCore.QRect(150, 270, 121, 28))
        self.compileMethod3Btn.setObjectName("compileMethod3Btn")
        self.instrGlobalVarNameLineEdit = QtWidgets.QLineEdit(self.method3Tab)
        self.instrGlobalVarNameLineEdit.setGeometry(QtCore.QRect(100, 110, 171, 31))
        self.instrGlobalVarNameLineEdit.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.instrGlobalVarNameLineEdit.setObjectName("instrGlobalVarNameLineEdit")
        self.instrGlobalVarTypeComboBox = QtWidgets.QComboBox(self.method3Tab)
        self.instrGlobalVarTypeComboBox.setGeometry(QtCore.QRect(100, 70, 171, 31))
        self.instrGlobalVarTypeComboBox.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.instrGlobalVarTypeComboBox.setObjectName("instrGlobalVarTypeComboBox")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarTypeComboBox.addItem("")
        self.instrGlobalVarNameTipLabel = QtWidgets.QLabel(self.method3Tab)
        self.instrGlobalVarNameTipLabel.setGeometry(QtCore.QRect(10, 110, 81, 31))
        self.instrGlobalVarNameTipLabel.setObjectName("instrGlobalVarNameTipLabel")
        self.instrGlobalVarTypeTipLabel = QtWidgets.QLabel(self.method3Tab)
        self.instrGlobalVarTypeTipLabel.setGeometry(QtCore.QRect(10, 70, 81, 31))
        self.instrGlobalVarTypeTipLabel.setObjectName("instrGlobalVarTypeTipLabel")
        self.assignCodeLineEdit = QtWidgets.QLineEdit(self.method3Tab)
        self.assignCodeLineEdit.setGeometry(QtCore.QRect(100, 230, 171, 31))
        self.assignCodeLineEdit.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.assignCodeLineEdit.setObjectName("assignCodeLineEdit")
        self.assignCodeTipLabel = QtWidgets.QLabel(self.method3Tab)
        self.assignCodeTipLabel.setGeometry(QtCore.QRect(10, 230, 81, 31))
        self.assignCodeTipLabel.setObjectName("assignCodeTipLabel")
        self.instrTabWidget.addTab(self.method3Tab, "")
        self.CStandardGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.CStandardGroupBox.setGeometry(QtCore.QRect(70, 340, 291, 51))
        self.CStandardGroupBox.setObjectName("CStandardGroupBox")
        self.C89RadioBtn = QtWidgets.QRadioButton(self.CStandardGroupBox)
        self.C89RadioBtn.setGeometry(QtCore.QRect(60, 20, 61, 19))
        self.C89RadioBtn.setChecked(True)
        self.C89RadioBtn.setObjectName("C89RadioBtn")
        self.C99RadioBtn = QtWidgets.QRadioButton(self.CStandardGroupBox)
        self.C99RadioBtn.setGeometry(QtCore.QRect(170, 20, 61, 19))
        self.C99RadioBtn.setObjectName("C99RadioBtn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 788, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # ==========connect================================================
        self.chooseCBtn.clicked.connect(self.chooseCFile)
        self.chooseHBtn.clicked.connect(self.chooseHFile)
        self.selectInstrVarBtn.clicked.connect(self.popStructDialog)
        self.pointerStyleRadioBtn.clicked.connect(self.setInstrumentCode)
        self.pointStyleRadioBtn.clicked.connect(self.setInstrumentCode)
        self.SAByCppcheckBtn.clicked.connect(self.SAByCppcheck)
        self.SAByManBtn.clicked.connect(self.popTargetDialog)
        self.SAResultGenBtn.clicked.connect(self.genSAResult)
        self.instrumentMethod1Btn.clicked.connect(self.instrumentM2)
        self.instrumentMethod2Btn.clicked.connect(self.instrumentM2)
        self.instrumentMethod3Btn.clicked.connect(self.instrumentM3)
        self.compileMethod1Btn.clicked.connect(self.compileInstrFiles)
        self.compileMethod2Btn.clicked.connect(self.compileInstrFiles)
        self.compileMethod3Btn.clicked.connect(self.compileInstrFiles)
        self.genCallGraphBtn.clicked.connect(self.genCallGraph)
        self.startServerBtn.clicked.connect(self.startServer)

        self.instrGlobalVarNameLineEdit.textChanged.connect(self.changeInstrCodeFromMethod3)
        self.instrGlobalVarTypeComboBox.currentIndexChanged.connect(self.changeInstrTypeFromMethod3)
        self.assignCodeLineEdit.textChanged.connect(self.updateAssignCodPreview)
        self.instrTabWidget.currentChanged.connect(self.updateInstrPreviewContent)
        self.structParameterName.textChanged.connect(self.updateInstrPreviewContent)
        self.manualInputInstrCodeLineEdit.textChanged.connect(self.updateInstrPreviewContent)
        self.instrVarTypeComboBox.currentIndexChanged.connect(self.updateInstrPreviewContent)

        regExp1 = QtCore.QRegExp("[a-zA-Z0-9_]{1,23}")
        self.instrGlobalVarNameLineEdit.setValidator(QtGui.QRegExpValidator(regExp1))
        # =================================================================

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.instrTabWidget.setCurrentIndex(0)
        self.instrVarTypeComboBox.setCurrentIndex(3)
        self.instrGlobalVarTypeComboBox.setCurrentIndex(9)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "模糊测试工具 - 服务端"))
        self.title.setText(_translate("MainWindow", "模糊测试工具 - 服务端"))
        self.fileSelectGroupBox.setTitle(_translate("MainWindow", "文件选择"))
        self.chooseCBtn.setText(_translate("MainWindow", "选择C文件"))
        self.CFileLoc.setPlaceholderText(_translate("MainWindow", "C文件位置"))
        self.HFileLoc.setPlaceholderText(_translate("MainWindow", "头文件位置"))
        self.chooseHBtn.setText(_translate("MainWindow", "选择头文件"))
        self.SAByCppcheckBtn.setText(_translate("MainWindow", "cppcheck"))
        self.SAByManBtn.setText(_translate("MainWindow", "手动选择"))
        self.targetSetInfo.setPlaceholderText(_translate("MainWindow", "目标集信息"))
        self.SAResultGenBtn.setText(_translate("MainWindow", "结果生成"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.codeStructTab), _translate("MainWindow", "基于代码结构"))
        self.selectInstrVarGroupBox.setTitle(_translate("MainWindow", "选择插装变量"))
        self.selectInstrVarBtn.setText(_translate("MainWindow", "选择插装变量"))
        self.startServerBtn.setText(_translate("MainWindow", "启动服务端程序"))
        self.callGraphGroupBox.setTitle(_translate("MainWindow", "调用图"))
        self.genCallGraphBtn.setText(_translate("MainWindow", "生成函数调用图"))
        self.instrCodePreviewGroupBox.setTitle(_translate("MainWindow", "插装语句预览"))
        self.instrumentCodeLabel.setText(_translate("MainWindow", "out_global->variable = 1 << x;"))
        self.instrVarTypeLabelTip.setText(_translate("MainWindow", "插装变量类型:"))
        self.instrVarTypeLabel.setText(_translate("MainWindow", "暂无"))
        self.assignCodePreviewTipLabel.setText(_translate("MainWindow", "赋值代码预览:"))
        self.assignCodePreviewLabel.setText(_translate("MainWindow", "仅支持方式3"))
        self.pointerStyleRadioBtn.setText(_translate("MainWindow", "->"))
        self.structParameterName.setText(_translate("MainWindow", "out_global"))
        self.structParameterName.setPlaceholderText(_translate("MainWindow", "结构体实参名"))
        self.pointStyleRadioBtn.setText(_translate("MainWindow", "."))
        self.method1TipLabel.setText(_translate("MainWindow", "方式1: 源代码中已存在输出结构体的\n" "全局变量, 使用系统自动生成的插装语\n" "句进行插装"))
        self.instrumentMethod1Btn.setText(_translate("MainWindow", "插装"))
        self.compileMethod1Btn.setText(_translate("MainWindow", "编译"))
        self.instrTabWidget.setTabText(self.instrTabWidget.indexOf(self.method1Tab), _translate("MainWindow", "方式1"))
        self.manualInputInstrCodeLineEdit.setToolTip(_translate("MainWindow", "手动输入插装语句，输入等号前的内容即可"))
        self.manualInputInstrCodeLineEdit.setText(_translate("MainWindow", "struct->example"))
        self.manualInputInstrCodeLineEdit.setPlaceholderText(_translate("MainWindow", "手动输入插装语句"))
        self.method2TipLabel.setText(_translate("MainWindow", "方式2: 源码中已存在输出结构体的\n" "全局变量, 手动输入插装语句进行插\n" "装"))
        self.instrVarTypeComboBox.setToolTip(_translate("MainWindow", "插装变量类型"))
        self.instrVarTypeComboBox.setItemText(0, _translate("MainWindow", "char"))
        self.instrVarTypeComboBox.setItemText(1, _translate("MainWindow", "short"))
        self.instrVarTypeComboBox.setItemText(2, _translate("MainWindow", "short int"))
        self.instrVarTypeComboBox.setItemText(3, _translate("MainWindow", "int"))
        self.instrVarTypeComboBox.setItemText(4, _translate("MainWindow", "long"))
        self.instrVarTypeComboBox.setItemText(5, _translate("MainWindow", "long long"))
        self.instrVarTypeComboBox.setItemText(6, _translate("MainWindow", "unsigned char"))
        self.instrVarTypeComboBox.setItemText(7, _translate("MainWindow", "unsigned short"))
        self.instrVarTypeComboBox.setItemText(8, _translate("MainWindow", "unsigned short int"))
        self.instrVarTypeComboBox.setItemText(9, _translate("MainWindow", "unsigned int"))
        self.instrVarTypeComboBox.setItemText(10, _translate("MainWindow", "unsigned long"))
        self.instrVarTypeComboBox.setItemText(11, _translate("MainWindow", "unsigned long long"))
        self.instrumentMethod2Btn.setText(_translate("MainWindow", "插装"))
        self.compileMethod2Btn.setText(_translate("MainWindow", "编译"))
        self.instrTabWidget.setTabText(self.instrTabWidget.indexOf(self.method2Tab), _translate("MainWindow", "方式2"))
        self.method3TipLabel.setText(_translate("MainWindow", "方式3: 源码中没有全局变量, 系统\n" "生成全局变量并插装, 用户需要指定\n" "发回报文所在位置"))
        self.sendBackCodeFileTipLabel.setText(_translate("MainWindow", "发回报文代\n" "码所在文件"))
        self.sendBackCodeLocTipLabel.setText(_translate("MainWindow", "发回报文代\n" "码所在行"))
        self.instrumentMethod3Btn.setText(_translate("MainWindow", "插装"))
        self.compileMethod3Btn.setText(_translate("MainWindow", "编译"))
        self.instrGlobalVarTypeComboBox.setToolTip(_translate("MainWindow", "插装变量类型"))
        self.instrGlobalVarTypeComboBox.setItemText(0, _translate("MainWindow", "char"))
        self.instrGlobalVarTypeComboBox.setItemText(1, _translate("MainWindow", "short"))
        self.instrGlobalVarTypeComboBox.setItemText(2, _translate("MainWindow", "short int"))
        self.instrGlobalVarTypeComboBox.setItemText(3, _translate("MainWindow", "int"))
        self.instrGlobalVarTypeComboBox.setItemText(4, _translate("MainWindow", "long"))
        self.instrGlobalVarTypeComboBox.setItemText(5, _translate("MainWindow", "long long"))
        self.instrGlobalVarTypeComboBox.setItemText(6, _translate("MainWindow", "unsigned char"))
        self.instrGlobalVarTypeComboBox.setItemText(7, _translate("MainWindow", "unsigned short"))
        self.instrGlobalVarTypeComboBox.setItemText(8, _translate("MainWindow", "unsigned short int"))
        self.instrGlobalVarTypeComboBox.setItemText(9, _translate("MainWindow", "unsigned int"))
        self.instrGlobalVarTypeComboBox.setItemText(10, _translate("MainWindow", "unsigned long"))
        self.instrGlobalVarTypeComboBox.setItemText(11, _translate("MainWindow", "unsigned long long"))
        self.instrGlobalVarNameTipLabel.setText(_translate("MainWindow", "插装全局变\n" "量名称"))
        self.instrGlobalVarTypeTipLabel.setText(_translate("MainWindow", "插装全局变\n" "量类型"))
        self.assignCodeTipLabel.setText(_translate("MainWindow", "赋值代码"))
        self.instrTabWidget.setTabText(self.instrTabWidget.indexOf(self.method3Tab), _translate("MainWindow", "方式3"))
        self.CStandardGroupBox.setTitle(_translate("MainWindow", "C语言标准"))
        self.C89RadioBtn.setText(_translate("MainWindow", "C89"))
        self.C99RadioBtn.setText(_translate("MainWindow", "C99"))

    # ==========定义功能================================================================

    def updateInstrPreviewContent(self):
        """改变tabwidget时改变插装预览的内容

        Notes
        -----
        [description]
        """
        if self.instrTabWidget.currentIndex() == 0:  # 方式1
            self.assignCodePreviewLabel.setText("仅支持方式3")
            root_loc = os.path.dirname(self.CFileLoc.toPlainText().split("\n")[0])
            instrTxtLoc = os.path.join(root_loc, "in", "instrument.txt")
            if os.path.exists(instrTxtLoc):
                f = open(instrTxtLoc)
                content = f.read()
                instrVarName = content.split(" ")[-1].split(":")[0]
                instrVarType = content.split(":")[0].split(" ")  # list
                instrVarType.pop(-1)
                instrVarType = " ".join(instrVarType)  # str
                f.close()
            else:
                instrVarName = "还未生成插装文件"
                instrVarType = "暂无"
            if self.pointerStyleRadioBtn.isChecked():  # 设置连接符
                connectStr = "->"
            else:
                connectStr = "."
            # 设置预览文本
            self.instrumentCodeLabel.setText(self.structParameterName.text() + connectStr + instrVarName + " |= 1<<x;")
            self.instrVarTypeLabel.setText(instrVarType)
        elif self.instrTabWidget.currentIndex() == 1:  # 方式2
            self.assignCodePreviewLabel.setText("仅支持方式3")
            self.instrVarTypeLabel.setText(self.instrVarTypeComboBox.currentText())
            if len(self.manualInputInstrCodeLineEdit.text()) > 0:
                self.instrumentCodeLabel.setText(self.manualInputInstrCodeLineEdit.text() + " |= 1<<x;")
            else:
                self.instrumentCodeLabel.setText("请输入 |= 1<<x;")
        elif self.instrTabWidget.currentIndex() == 2:  # 方式3
            self.instrumentCodeLabel.setText(self.instrGlobalVarNameLineEdit.text() + " |= 1<<x;")
            self.instrVarTypeLabel.setText(self.instrGlobalVarTypeComboBox.currentText())
            if len(self.assignCodeLineEdit.text()) < 1:
                self.assignCodePreviewLabel.setText("暂无")
            else:
                self.assignCodePreviewLabel.setText(self.assignCodeLineEdit.text())

    def chooseCFile(self):
        """选择C文件

        Notes
        -----
        现在可以选择C或CPP文件
        """
        # 注意！getOpenFileNames()中的filter如果想选择多个文件的话，需要用两个分号隔开！
        temp = QtWidgets.QFileDialog.getOpenFileNames(None, "choose file", r"C:\Users\Radon\Desktop", filter="cpp files(*.cpp);;c files(*.c)")
        path = ""
        for i in range(len(temp[0])):
            path += temp[0][i] + "\n"
        path = path.rstrip("\n")
        if "win" in sys.platform:  # 如果是windows平台，则将路径中的斜杠替换为反斜杠
            path = path.replace("/", "\\")
        self.CFileLoc.setText(path)

        # 设置插装方式3中的comboBox
        self.sendBackCodeFileComboBox.clear()
        files = list()
        files = [os.path.basename(file) for file in self.CFileLoc.toPlainText().split("\n")]
        self.sendBackCodeFileComboBox.addItems(files)

    def chooseHFile(self):
        """选择头文件

        Notes
        -----
        [description]
        """
        temp = QtWidgets.QFileDialog.getOpenFileNames(None, "choose file", r"C:\Users\Radon\Desktop", "h files (*.h)")
        path = ""
        for i in range(len(temp[0])):
            path += temp[0][i] + "\n"
        path = path.rstrip("\n")
        if "win" in sys.platform:  # 如果是windows平台，则将路径中的斜杠替换为反斜杠
            path = path.replace("/", "\\")
        self.HFileLoc.setText(path)

    def popStructDialog(self):
        """弹出选择结构体的对话框

        Notes
        -----
        [description]
        """
        self.header_loc_list = self.HFileLoc.toPlainText().split("\n")
        for header in self.header_loc_list:
            if not os.path.exists(header):
                headerNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "头文件" + header + "不存在!")
                headerNotExistBox.exec_()
                return

        # 询问用户是否读取JSON
        readJSON = False
        whetherReadJSONBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Question, "读取文件", "是否读取现有JSON文件?")
        yes = whetherReadJSONBox.addButton("是", QtWidgets.QMessageBox.YesRole)
        no = whetherReadJSONBox.addButton("否", QtWidgets.QMessageBox.NoRole)
        whetherReadJSONBox.exec_()
        if whetherReadJSONBox.clickedButton() == yes:
            readJSON = True

        # 如果读取现有文件，就让用户选择JSON
        if readJSON:
            selectedFile = QtWidgets.QFileDialog.getOpenFileName(None, "choose file", r"C:\Users\Radon\Desktop", filter="json file (*.json)")
            JSONPath = selectedFile[0]
            try:
                # 如果JSONPath是空字符串，表示用户点击了右上角的X
                if JSONPath == "":
                    return
                self.outputDialog = QtWidgets.QDialog()
                self.uiOutput = outputDialogPY.Ui_Dialog()
                self.uiOutput.setupUi(self.outputDialog)
                self.uiOutput.initStructDict(self.header_loc_list, JSONPath, readJSON, self, struct="struct", allStruct=["all", "Struct"])
                self.outputDialog.show()
            except BaseException as e:
                traceback.print_exc()
                loadJSONFailedBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "读取失败", "JSON文件读取失败!")
                loadJSONFailedBox.exec_()
        # 如果不读取现有文件，就让用户选择输入/输出变量格式
        else:
            # 检查clang是否安装正确
            if os.system("clang -v") != 0:
                clangInstallErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "未检测到clang")
                clangInstallErrBox.exec_()
                return
            try:
                self.selectStructDialog = QtWidgets.QDialog()
                self.uiSelectStruct = selectStructDialogPY.Ui_Dialog()
                self.uiSelectStruct.setupUi(self.selectStructDialog)
                self.uiSelectStruct.setValues(self.header_loc_list, "output", self)
                self.selectStructDialog.show()
            except BaseException as e:
                analyzeStructErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "分析结构体时出错:" + str(e))
                analyzeStructErrBox.exec_()

                # 提示用户解决方案
                analyzeStructTipBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "提示",
                                                            "推荐解决方案:\n" + "1.请确认代码无误\n" + "2.请给结构体定义别名，否则可能会导致显示不全\n" + "3.目前仅支持C语言, 请确认代码中仅有C语言的关键字")
                analyzeStructTipBox.exec_()

                print("\033[1;31m")
                traceback.print_exc()
                print("\033[0m")

    def popTargetDialog(self):
        """弹出一个dialog，其中显示了C中所有函数，供用户选择目标

        Notes
        -----
        [description]
        """
        # 获取所有函数需要用clang，检测是否安装clang
        if os.system("clang -v") != 0:
            clangInstallErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "未检测到clang")
            clangInstallErrBox.exec_()
            return

        self.targetSetInfo.clear()
        source_loc_str = self.CFileLoc.toPlainText()
        source_loc_list = source_loc_str.split("\n")
        for source in source_loc_list:
            if not os.path.exists(source):
                sourceNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "C文件不存在!")
                sourceNotExistBox.exec_()
                return
        self.targetDialog = QtWidgets.QDialog()
        self.uiTarget = targetDialogPY.Ui_Dialog()
        self.uiTarget.setupUi(self.targetDialog)
        self.uiTarget.setValues(ui, source_loc_list, [])
        self.targetDialog.show()

    def SAByCppcheck(self):
        """通过CPPCHECK进行静态分析获取可能有缺陷的地方

        Notes
        -----
        [description]
        """
        # cppcheck与人工分析的结果需要存储到txt里
        self.targetSetInfo.clear()

        source_loc_list = self.CFileLoc.toPlainText().split("\n")
        for source in source_loc_list:
            if not os.path.exists(source):
                sourceNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "C文件不存在")
                sourceNotExistBox.exec_()
                return

        # 检查cppcheck是否正确安装
        if os.system("cppcheck --version") != 0:
            cppcheckInstallErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "未检测到cppcheck")
            cppcheckInstallErrBox.exec_()
            return

        try:
            source_loc_str = self.CFileLoc.toPlainText()
            self.SAResult = sa.analyze(source_loc_str)
            if len(self.SAResult) == 0:
                self.targetSetInfo.setText("暂无目标!")
                return
            if isinstance(self.SAResult, str):
                self.targetSetInfo.setText(self.SAResult)
                return
            self.targetDialog = QtWidgets.QDialog()
            self.uiTarget = targetDialogPY.Ui_Dialog()
            self.uiTarget.setupUi(self.targetDialog)
            self.uiTarget.setValues(ui, source_loc_str.split("\n"), self.SAResult)
            self.targetDialog.show()
        except BaseException as e:
            cppcheckErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "分析失败:" + str(e))
            cppcheckErrBox.exec_()

    def genSAResult(self):
        """将目标集信息写入saresult.txt

        Notes
        -----
        [description]
        """
        try:
            source_loc_list = self.CFileLoc.toPlainText().split("\n")
            for source in source_loc_list:
                if not os.path.exists(source):
                    sourceNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "C文件不存在")
                    sourceNotExistBox.exec_()
                    return

            root_loc = source_loc_list[0]
            root_loc = os.path.join(os.path.dirname(root_loc), "in")
            if not os.path.exists(root_loc):
                os.mkdir(root_loc)
            f = open(os.path.join(root_loc, "saresult.txt"), mode="w")
            for data in self.targetSetInfo.toPlainText().split("\n"):
                f.write(data + "\n")
            f.close()
            genSAResultSuccBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "消息", "结果生成成功!")
            genSAResultSuccBox.exec_()
        except BaseException as e:
            print("\033[1;31m")
            traceback.print_exc()
            print("\033[0m")
            genSAResultErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "结果生成失败:" + str(e))
            genSAResultErrBox.exec_()

    def setInstrumentCode(self):
        """设置插装语句的预览文本

        Notes
        -----
        [description]
        """
        # 读取插装变量
        root_loc = os.path.dirname(self.CFileLoc.toPlainText().split("\n")[0])
        instrTxtLoc = os.path.join(root_loc, "in", "instrument.txt")
        if os.path.exists(instrTxtLoc):
            f = open(instrTxtLoc)
            content = f.read()
            instrVarName = content.split(" ")[-1].split(":")[0]
            instrVarType = content.split(":")[0].split(" ")  # list
            instrVarType.pop(-1)
            instrVarType = " ".join(instrVarType)  # str
            f.close()
        else:
            instrVarName = "还未生成插装文件"
            instrVarType = "暂无"
        if self.pointerStyleRadioBtn.isChecked():  # 设置连接符
            connectStr = "->"
        else:
            connectStr = "."
        # 设置预览文本
        self.instrumentCodeLabel.setText(self.structParameterName.text() + connectStr + instrVarName + " |= 1<<x;")
        self.instrVarTypeLabel.setText(instrVarType)

    def setInstrumentCodeManually(self):
        """手动设置插装语句

        Notes
        -----
        [description]
        """
        self.instrumentCodeLabel.setText(self.manualInputInsCode.text() + " |= 1<<x;")
        self.instrVarTypeLabel.setText(self.instrVarTypeComboBox.currentText())

    def changeInstrCodeFromMethod3(self):
        """根据方式3输入框中的内容改变插装语句预览内容

        Notes
        -----
        [description]
        """
        instrCode = self.instrGlobalVarNameLineEdit.text() + " = 1<<x;"
        self.instrumentCodeLabel.setText(instrCode)
        self.instrVarTypeLabel.setText(self.instrGlobalVarTypeComboBox.currentText())

    def changeInstrTypeFromMethod3(self):
        """将插装全局变量类型变为comboBox中所选类型

        Notes
        -----
        [description]
        """
        self.instrVarTypeLabel.setText(self.instrGlobalVarTypeComboBox.currentText())

    def instrumentM2(self):
        """对文件进行插装与编译，在源文件同目录下生成instrument.exe文件

        Notes
        -----
        [description]
        """
        source_loc_list = self.CFileLoc.toPlainText().split("\n")
        header_loc_list = self.HFileLoc.toPlainText().split("\n")
        root_loc = os.path.dirname(source_loc_list[0])
        for source in source_loc_list:
            if not os.path.exists(source):
                sourceNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "C文件不存在!")
                sourceNotExistBox.exec_()
                return
        for header in header_loc_list:
            if not os.path.exists(header):
                headerNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "头文件不存在!")
                headerNotExistBox.exec_()
                return
        # 检查mingw是否安装正确
        if os.system("gcc --version") != 0:
            gccInstallErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "未检测到mingw")
            gccInstallErrBox.exec_()
            return

        try:
            if os.path.exists(os.path.join(root_loc, "instrument.exe")):  # 移除旧的instrument.exe
                os.remove(os.path.join(root_loc, "instrument.exe"))
            instrTemplate = self.instrumentCodeLabel.text().split("|=")[0].rstrip()
            # 生成insFunc.c与insFunc.dll
            # instrVarName是插装变量的名字, instrTemplate是插装语句等号左边的东西
            instrVarName = instrTemplate.replace("->", " ").replace(".", " ")
            instrVarName = re.sub(instrVarName.split(" ")[0], "", instrTemplate)
            instrVarName = instrVarName.lstrip("[->.]")
            # instrVarType是插装变量的类型
            instrVarType = self.instrVarTypeLabel.text()
            # 插装与生成dll
            if self.C89RadioBtn.isChecked():
                obj = instr.instrumentMethod2BaseC89()
                obj.instrument(source_loc_list, instrTemplate)
                obj.genInstrCFile(header_loc_list, source_loc_list, instrVarType, instrVarName)
                del obj
            else:
                obj = instr.instrumentMethod2BaseC99()
                obj.instrument(source_loc_list, instrTemplate)
                obj.genInstrCFile(header_loc_list, source_loc_list, instrVarType, instrVarName)
                del obj
            os.system("gcc -shared -o " + os.path.join(root_loc, "in", "insFunc.dll") + " " + os.path.join(root_loc, "in", "insFunc.c"))
            instrSuccBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "消息", "插装成功!")
            instrSuccBox.exec_()
        except BaseException as e:
            print("\033[1;31m")
            traceback.print_exc()
            print("\033[0m")
            instrErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "插装失败: " + str(e))
            instrErrBox.exec_()

    def instrumentM3(self):
        """插装方式3

        Notes
        -----
        [description]
        """
        source_loc_list = self.CFileLoc.toPlainText().split("\n")
        header_loc_list = self.HFileLoc.toPlainText().split("\n")
        root_loc = os.path.dirname(source_loc_list[0])
        for source in source_loc_list:
            if not os.path.exists(source):
                sourceNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "C文件不存在!")
                sourceNotExistBox.exec_()
                return
        for header in header_loc_list:
            if not os.path.exists(header):
                headerNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "头文件不存在!")
                headerNotExistBox.exec_()
                return

        try:
            source_loc_list = self.CFileLoc.toPlainText().split("\n")
            dataType = self.instrGlobalVarTypeComboBox.currentText()
            dataName = self.instrGlobalVarNameLineEdit.text()
            targetSource = self.sendBackCodeFileComboBox.currentText()
            nthLine = int(self.sendBackCodeLocLineEdit.text())
            assignCode = self.assignCodeLineEdit.text()
            instrFileLoc = os.path.join(root_loc, "in", "instrument.txt")
            instrText = open(instrFileLoc).read()
            instrVarType = instrText.split(" ")
            instrVarType.pop(-1)
            instrVarType = " ".join(instrVarType)
            instrVarName = instrText.split(" ")[-1].split(":")[0]
            if self.C89RadioBtn.isChecked():
                obj = instr.instrumentMethod3BaseC89()
                obj.instrument(source_loc_list, dataType, dataName)
                obj.insertAssignCode(source_loc_list, "ins_" + targetSource, nthLine, assignCode)
                obj.genInstrCFile(header_loc_list, source_loc_list, instrVarType, instrVarName)
            else:
                obj = instr.instrumentMethod3BaseC99()
                obj.instrument(source_loc_list, dataType, dataName)
                obj.insertAssignCode(source_loc_list, "ins_" + targetSource, nthLine, assignCode)
                obj.genInstrCFile(header_loc_list, source_loc_list, instrVarType, instrVarName)
            os.system("gcc -shared -o " + os.path.join(root_loc, "in", "insFunc.dll") + " " + os.path.join(root_loc, "in", "insFunc.c"))
            del obj
            instrSuccBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "消息", "插装成功!")
            instrSuccBox.exec_()
        except BaseException as e:
            instrErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "插装出错:" + str(e))
            instrErrBox.exec_()
            print("\033[1;31m")
            traceback.print_exc()
            print("\033[0m")

    def updateAssignCodPreview(self):
        self.assignCodePreviewLabel.setText(self.assignCodeLineEdit.text())

    def compileInstrFiles(self):
        if os.system("g++ --version"):  #检测mingw
            mingwNotDetectedBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "未检测到mingw")
            mingwNotDetectedBox.exec_()
            return
        source_loc_list = self.CFileLoc.toPlainText().split("\n")
        instr_loc = os.path.join(os.path.dirname(source_loc_list[0]), "instrument.exe")
        if os.path.exists(instr_loc):
            os.remove(instr_loc)

        try:
            instr.compileInstrFiles(source_loc_list)
            if not os.path.exists(instr_loc):
                raise Exception("未能正确生成instrument.exe")
            compileSuccBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "消息", "编译成功!")
            compileSuccBox.exec_()
        except BaseException as e:
            compileErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "编译失败:" + str(e))
            compileErrBox.exec_()
            print("\033[1;31m")
            traceback.print_exc()
            print("\033[0m")

    def genCallGraph(self):
        """在源文件根目录的in文件夹下生成调用图callgraph.txt

        Notes
        -----
        [description]
        """
        source_loc_list = self.CFileLoc.toPlainText().split("\n")
        root_loc = os.path.dirname(source_loc_list[0])
        for source in source_loc_list:
            if not os.path.exists(source):
                sourceNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "C文件不存在!")
                sourceNotExistBox.exec_()
                return
        # 获取函数调用图需要用clang，检测是否安装clang
        if os.system("clang -v") != 0:
            clangInstallErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "未检测到clang")
            clangInstallErrBox.exec_()
            return

        try:
            if not os.path.exists(os.path.join(root_loc, "in")):
                os.mkdir(os.path.join(root_loc, "in"))
            graph_loc = os.path.join(root_loc, "in", "callgraph.txt")
            cg.createCallGraph(source_loc_list, graph_loc)
            genCGSuccBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, "消息", "调用图生成成功!")
            genCGSuccBox.exec_()
        except BaseException as e:
            print("\033[1;31m")
            traceback.print_exc()
            print("\033[0m")
            genCGErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "调用图生成失败: " + str(e))
            genCGErrBox.exec_()

    def startServer(self):
        """启动服务端程序

        Notes
        -----
        [description]
        """
        try:
            program_loc = self.CFileLoc.toPlainText().split("\n")[0]
            program_loc = os.path.join(os.path.dirname(program_loc), "instrument.exe")
            if not os.path.exists(program_loc):
                programNotExistBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "插装程序不存在!")
                programNotExistBox.exec_()
                return

            os.system("explorer.exe " + program_loc)
        except BaseException as e:
            print("\033[1;31m")
            traceback.print_exc()
            print("\033[0m")
            startServerErrBox = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, "警告", "服务端启动失败:" + str(e))
            startServerErrBox.exec_()

    # ==================================================================================


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())