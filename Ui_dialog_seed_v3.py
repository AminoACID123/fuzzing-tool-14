'''
Author: 金昊宸
Date: 2021-04-22 14:26:43
LastEditTime: 2021-04-24 16:52:42
Description: 只包含唯一插桩变量，不区分结构体
'''
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\VSCode_Project\python_project\fuzzProject\dialog_seed_v2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QRegExp, Qt
from PyQt5.QtGui import QDoubleValidator, QIntValidator, QRegExpValidator
from PyQt5.QtWidgets import QMessageBox

import staticAnalysis as sa

# 传入数据结构-start
structDict = {
    "结构体名1": {
        "变量名11": {
            "value": "var1",
            "lower": 10,
            "upper": 200,
            "instrument": False,
        },
        "变量名12": {
            "value": "var2",
            "lower": 300,
            "upper": 500,
            "instrument": False,
        }
    },
    "结构体名2": {
        "变量名21": {
            "value": "var3",
            "lower": 30,
            "upper": 50,
            "instrument": False,
        },
        "变量名22": {
            "value": "var4",
            "lower": 10,
            "upper": 30,
            "instrument": False,
        },
        "变量名23": {
            "value": "var5",
            "lower": 300,
            "upper": 500,
            "instrument": False,
        },
    }
}
# 传入数据结构-end


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setWindowTitle("自定义结构体成员变量值")
        Dialog.resize(900, 550)

        # 标题Lable-start
        self.title = QtWidgets.QLabel(Dialog)
        self.title.setGeometry(QtCore.QRect(30, 30, 840, 50))
        self.title.setText(
            "<p style=\"font-size:40px;font-weight:bold\">自定义结构体成员变量值</p>")
        self.title.setAlignment(Qt.AlignCenter)
        self.title.setObjectName("title")
        # 标题Lable-end
        # 选择结构体Lable-start
        self.selectStructTitle = QtWidgets.QLabel(Dialog)
        self.selectStructTitle.setGeometry(QtCore.QRect(30, 100, 300, 50))
        self.selectStructTitle.setText(
            "<p style=\"font-size:30px\">选择结构体变量：</p>")
        self.selectStructTitle.setAlignment(Qt.AlignLeft)
        self.selectStructTitle.setObjectName("selectStructTitle")
        # 选择结构体Lable-end
        # 选择成员变量下拉列表ComboBox-start
        self.selectStructCombo = QtWidgets.QComboBox(Dialog)
        self.selectStructCombo.setGeometry(QtCore.QRect(310, 90, 500, 50))
        self.selectStructCombo.setObjectName("selectStructCombo")
        # 选择成员变量下拉列表ComboBox-end
        # 选择成员变量Lable-start
        self.selectMemVarTitle = QtWidgets.QLabel(Dialog)
        self.selectMemVarTitle.setGeometry(QtCore.QRect(30, 160, 300, 50))
        self.selectMemVarTitle.setText(
            "<p style=\"font-size:30px\">选择成员变量：</p>")
        self.selectMemVarTitle.setAlignment(Qt.AlignLeft)
        self.selectMemVarTitle.setObjectName("selectMemVarTitle")
        # 选择成员变量Lable-end
        # 成员变量选择下拉列表ComboBox-start
        self.selectMemVarCombo = QtWidgets.QComboBox(Dialog)
        self.selectMemVarCombo.setGeometry(QtCore.QRect(310, 150, 500, 50))
        self.selectMemVarCombo.setObjectName("selectMemVarCombo")
        # 成员变量选择下拉列表ComboBox-end
        # 输入成员变量值Lable-start
        self.memVarValueTitle = QtWidgets.QLabel(Dialog)
        self.memVarValueTitle.setGeometry(QtCore.QRect(30, 220, 300, 50))
        self.memVarValueTitle.setText(
            "<p style=\"font-size:30px\">输入成员变量值：</p>")
        self.memVarValueTitle.setAlignment(Qt.AlignLeft)
        self.memVarValueTitle.setObjectName("memVarValueTitle")
        # 输入成员变量值Lable-end
        # 成员变量输入框Edit-start
        self.memVarValueEdit = QtWidgets.QLineEdit(Dialog)
        self.memVarValueEdit.setGeometry(QtCore.QRect(310, 210, 500, 50))
        # 输入框文本验证-start
        reg = QRegExp('^(\-|\+)?\d+(\.\d+)?$')  # 正数、负数、小数-正则
        pValidator = QRegExpValidator()
        pValidator.setRegExp(reg)
        # 输入框文本验证-end
        self.memVarValueEdit.setValidator(pValidator)  # 加入正则文本文本验证
        self.memVarValueEdit.setObjectName("memVarValueEdit")
        # 成员变量输入框Edit-end
        # 确定按钮Button-start
        self.determineBtn = QtWidgets.QPushButton(Dialog)
        self.determineBtn.setGeometry(QtCore.QRect(30, 280, 840, 50))
        self.determineBtn.setText("确定")
        self.determineBtn.setObjectName("determineBtn")
        # 确定按钮Button-end
        # 设置插桩变量Button-start
        self.insVarBtn = QtWidgets.QPushButton(Dialog)
        self.insVarBtn.setGeometry(QtCore.QRect(70, 350, 760, 50))
        self.insVarBtn.setText("设置为插桩变量")
        self.insVarBtn.setObjectName("insVarBtn")
        # 设置插桩变量Button-end
        # 设置插桩变量Lable-start
        self.structInsVarTitle = QtWidgets.QLabel(Dialog)
        self.structInsVarTitle.setGeometry(QtCore.QRect(70, 420, 840, 50))
        self.structInsVarTitle.setText(
            "<p style=\"font-size:30px\">当前插桩变量为：空</p>")
        self.structInsVarTitle.setAlignment(Qt.AlignLeft)
        self.structInsVarTitle.setObjectName("structInsVarTitle")
        self.retranslateUi(Dialog)

        #--------------------------------------------------------#
        self.selectStructCombo.currentIndexChanged.connect(
            self.structcomboChange)  # 结构体下拉列表选择-活动
        self.selectMemVarCombo.currentIndexChanged.connect(
            self.memVarcomboChange)  # 成员变量下拉列表选择-活动
        self.determineBtn.clicked.connect(self.determineBtnClick)  # 按钮点击-活动
        self.insVarBtn.clicked.connect(self.setInsVarBtnClick)  # 按钮点击-活动

    def retranslateUi(self, Dialog):
        pass

    # 结构体下拉列表点击活动-start
    def structcomboChange(self):
        self.memVarValueEdit.setText("")  # 重置输入框内容
        structComboText = self.selectStructCombo.itemText(
            self.selectStructCombo.currentIndex())  # 结构体下拉列表当前选中的内容
        memValDictItem = structDict[str(self.selectStructCombo.itemText(
            self.selectStructCombo.currentIndex()))]
        self.selectMemVarCombo.clear()
        for key, value in memValDictItem.items():
            self.selectMemVarCombo.addItem(key)
    # 结构体下拉列表点击活动-end

    # 成员变量下拉列表点击活动-start
    def memVarcomboChange(self):
        self.memVarValueEdit.setText("")  # 重置输入框内容
        structComboText = self.selectStructCombo.itemText(
            self.selectStructCombo.currentIndex())  # 结构体下拉列表当前选中的内容
        memValComboText = self.selectMemVarCombo.itemText(
            self.selectMemVarCombo.currentIndex())  # 成员变量下拉列表当前选中内容
        if structComboText != "" and memValComboText != "":
            s = structDict[structComboText][memValComboText]
            self.memVarValueEdit.setPlaceholderText(
                "当前值：%s   取值范围：%s-%s" % (s["value"], s["lower"], s["upper"]))  # 修改输入框默认值
            # 初始化第一个变量是否为插桩变量，更改按钮样式-start
            if s["instrument"]:
                self.insVarBtn.setText("取消插桩变量")
            else:
                self.insVarBtn.setText("设置为插桩变量")
            # 初始化第一个变量是否为插桩变量，更改按钮样式-end
    # 成员变量下拉列表点击活动-end

    # 设置插桩变量按钮点击-start
    def setInsVarBtnClick(self):
        structComboText = self.selectStructCombo.itemText(
            self.selectStructCombo.currentIndex())  # 结构体下拉列表当前选中的内容
        memValComboText = self.selectMemVarCombo.itemText(
            self.selectMemVarCombo.currentIndex())  # 成员变量下拉列表当前选中内容
        s = structDict[structComboText][memValComboText]
        if s["instrument"]:  # 取消插桩变量
            self.clearInstruments()
            # s["instrument"] = False
            self.insVarBtn.setText("设置为插桩变量")
            self.structInsVarTitle.setText(
                "<p style=\"font-size:30px\">当前插桩变量为：%s</p>" % ("空"))
        else:  # 设置为插桩变量
            self.clearInstruments()
            s["instrument"] = True
            self.insVarBtn.setText("取消插桩变量")
            self.structInsVarTitle.setText(
                "<p style=\"font-size:30px\">当前插桩变量为：%s</p>" % (memValComboText))
    # 设置插桩变量按钮点击-end

    # 设置值按钮点击-start
    def determineBtnClick(self):
        structComboText = self.selectStructCombo.itemText(
            self.selectStructCombo.currentIndex())  # 结构体下拉列表当前选中的内容
        memValComboText = self.selectMemVarCombo.itemText(
            self.selectMemVarCombo.currentIndex())  # 成员变量下拉列表当前选中内容
        inputText = self.memVarValueEdit.text()  # 获取输入框内容
        s = structDict[structComboText][memValComboText]
        if inputText != "":  # 不为空时
            if float(inputText) <= s["upper"] and float(inputText) >= s["lower"]:  # 数值范围验证
                structDict[structComboText][memValComboText]["value"] = inputText
            else:
                # 超范围错误提醒-start
                msg_box = QMessageBox(
                    QMessageBox.Warning, '错误', '请输入%s-%s内的值' % (s["lower"], s["upper"]))
                msg_box.exec_()
                # 超范围错误提醒-end
    # 设置值按钮点击-end

    # 将所有插桩插桩变量设置为False，为唯一插桩变量准备-start
    def clearInstruments(self):
        for key, var in structDict.items():
            for key1, var1 in var.items():
                var1["instrument"] = False
    # 将所有插桩插桩变量设置为False，为唯一插桩变量准备-end

    # 根据传入的头文件路径分析头文件
    def initStructDict(self, header_loc):
        header_info = sa.analyzeHeader(header_loc)
        global structDict
        structDict.clear()
        tempDict = {}
        for i in range(len(header_info)):
            tempDict.clear()
            for j in range(1,len(header_info[i])):
                tempDict[header_info[i][j]] = {"value":"var1", "lower": 10, "upper": 200, "instrument": False,}
            structDict[header_info[i][0]] = tempDict.copy()
        print("initStructDict-----"+str(structDict))
        print("==================================================")
        # =======================================================================
        # =======================================================================
        # =======================================================================

        for key, value in structDict.items():  # 插入结构体下拉列表
            self.selectStructCombo.addItem(key)
        # 设置输入框默认值
        self.memVarValueEdit.setPlaceholderText(
            "当前：%s   取值范围：%s-%s" % (list(list(structDict.items())[0][1].items())[0][1]["value"], list(list(structDict.items())[0][1].items())[0][1]["lower"], list(list(structDict.items())[0][1].items())[0][1]["upper"]))
        # 初始化第一个变量是否为插桩变量，更改按钮样式-start
        if list(list(structDict.items())[0][1].items())[0][1]["instrument"]:
            self.insVarBtn.setText("取消插桩变量")
        # 初始化第一个变量是否为插桩变量，更改按钮样式-end
        # 初始化插桩变量显示-start
        flag = 0
        varAmount = 0
        for key, var in structDict.items():
            varAmount += len(var)
        for key, var in structDict.items():
            for key1, var1 in var.items():
                if var1["instrument"]:
                    self.structInsVarTitle.setText(
                        "<p style=\"font-size:30px\">当前插桩变量为：%s</p>" % (key1))
                    break
                else:
                    flag += 1
                    if flag == varAmount:
                        self.structInsVarTitle.setText(
                            "<p style=\"font-size:30px\">当前插桩变量为：%s</p>" % ("空"))
                    flag = 0
        # 初始化插桩变量显示-end

        # =======================================================================
        # =======================================================================
        # =======================================================================
    # 结束
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(dialog)
    dialog.show()
    sys.exit(app.exec_())